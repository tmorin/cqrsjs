{"version":3,"sources":["cqrs.js"],"names":["root","factory","define","amd","exports","module","cqrs","this","log","debug","console","apply","arguments","whenify","value","then","Promise","resolve","addHandler","owner","commandName","callback","alreadyRegistered","handlersRepo","some","e","push","removeHandlers","filter","forEach","splice","getHandler","commands","length","Error","addListener","eventName","listenersRepo","removeListeners","index","indexOf","listListeners","addAggregateListener","aggregateName","aggregate","aggregates","aggregatesRepo","listeners","removeAggregateListeners","listAggregateListeners","map","reduce","a","b","concat","l","addQuery","queryName","queryFunction","isAlreadyRegistered","queriesRepo","query","removeQueries","getQuery","queries","generateTechnicalName","namespace","type","name","join","params","send","payload","metadata","cmdName","handler","sentOn","Date","when","invoke","publish","evtName","publishedOn","promises","listener","all","on","calling","qryName","call","args","Array","prototype","slice","shift","aggregateWhen","callbackWrapper","callbackReturnedValue","eventPayload","appliedOn","aggName","invokeExports","aggregateOn","aggregateOnExports","destroy","counter","setDefaultRepos","defaultHandlers","defaultListeners","defaultAggregates","defaultQueries"],"mappings":"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","file":"cqrs.js","sourcesContent":["/*\n * cqrs.js\n * Copyright 2014-2015 Thibault Morin\n * @license MIT\n */\n(function(root, factory) {\n    /* globals define:false */\n    'use strict';\n    /* istanbul ignore next */\n    if (typeof define === 'function' && define.amd) {\n        define('cqrsjs', [], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.cqrs = factory();\n    }\n}(this, function() {\n    'use strict';\n\n    var handlersRepo = [], listenersRepo = [], aggregatesRepo = [], queriesRepo = [], counter = 0;\n\n    function log() {\n        /* istanbul ignore next */\n        if (cqrs.debug) {\n            console.log.apply(console, arguments);\n        }\n    }\n\n    function whenify(value) {\n        if (value && typeof value.then === 'function') {\n            return value;\n        }\n        return new Promise(function (resolve) {\n            resolve(value);\n        });\n    }\n\n    // handlers' repo functions\n    function addHandler(owner, commandName, callback) {\n        var alreadyRegistered = handlersRepo.some(function(e) {\n            return e.commandName === commandName;\n        });\n        if (!alreadyRegistered) {\n            handlersRepo.push({\n                owner: owner,\n                commandName: commandName,\n                callback: callback\n            });\n        }\n    }\n\n    function removeHandlers(owner) {\n        handlersRepo.filter(function(e) {\n            return e.owner === owner;\n        }).forEach(function(e) {\n            handlersRepo.splice(e, 1);\n        });\n    }\n\n    function getHandler(commandName) {\n        var commands = handlersRepo.filter(function(e) {\n            return e.commandName === commandName;\n        });\n        if (commands.length > 0) {\n            return commands[0];\n        }\n        throw new Error('unable to find the handler ' + commandName);\n    }\n\n    // listeners' repo functions\n    function addListener(owner, eventName, callback) {\n        listenersRepo.push({\n            owner: owner,\n            eventName: eventName,\n            callback: callback\n        });\n    }\n\n    function removeListeners(owner) {\n        listenersRepo.filter(function(e) {\n            return e.owner === owner;\n        }).forEach(function(e) {\n            var index = listenersRepo.indexOf(e);\n            listenersRepo.splice(index, 1);\n        });\n    }\n\n    function listListeners(eventName) {\n        return listenersRepo.filter(function(e) {\n            return e.eventName === eventName;\n        });\n    }\n\n    // aggregates listeners' repo functions\n    function addAggregateListener(owner, aggregateName, eventName, callback) {\n        var aggregate, aggregates = aggregatesRepo.filter(function(e) {\n            return e.owner === owner && e.aggregateName === aggregateName;\n        });\n        if (aggregates.length > 0) {\n            aggregate = aggregates[0];\n        } else {\n            aggregate = {\n                owner: owner,\n                aggregateName: aggregateName,\n                listeners: []\n            };\n            aggregatesRepo.push(aggregate);\n        }\n        aggregate.listeners.push({\n            eventName: eventName,\n            callback: callback\n        });\n    }\n\n    function removeAggregateListeners(owner) {\n        aggregatesRepo.filter(function(e) {\n            return e.owner === owner;\n        }).forEach(function(e) {\n            var index = aggregatesRepo.indexOf(e);\n            aggregatesRepo.splice(index, 1);\n        });\n    }\n\n    function listAggregateListeners(aggregateName, eventName) {\n        return aggregatesRepo.filter(function(e) {\n            return e.aggregateName === aggregateName;\n        }).map(function(e) {\n            return e.listeners;\n        }).reduce(function(a, b) {\n            return a.concat(b);\n        }, []).filter(function(l) {\n            return l.eventName === eventName;\n        });\n    }\n\n    // queries' repo functions\n    function addQuery(owner, queryName, queryFunction) {\n        var isAlreadyRegistered = queriesRepo.filter(function(query) {\n            return query.queryName === queryName;\n        }).length > 0;\n        if (!isAlreadyRegistered) {\n            queriesRepo.push({\n                owner: owner,\n                queryName: queryName,\n                queryFunction: queryFunction\n            });\n        }\n    }\n\n    function removeQueries(owner) {\n        queriesRepo.filter(function(e) {\n            return e.owner === owner;\n        }).forEach(function(e) {\n            var index = queriesRepo.indexOf(e);\n            queriesRepo.splice(index, 1);\n        });\n    }\n\n    function getQuery(queryName) {\n        var queries = queriesRepo.filter(function(e) {\n            return e.queryName === queryName;\n        });\n        if (queries.length > 0) {\n            return queries[0];\n        }\n        throw new Error('unable to find the query ' + queryName);\n    }\n\n    // generate technical name for aggregate, command and event\n    function generateTechnicalName(namespace, type, name) {\n        if (namespace) {\n            return [namespace, type, name].join('-');\n        }\n        return [type, name].join('-');\n    }\n\n    // cqrs implementation\n    function cqrs(params) {\n        var owner, namespace, exports;\n        exports = {};\n        params = params || {};\n        owner = params.owner || ('owner-' + (counter++));\n        namespace = params.namespace;\n\n        // to send a command\n        function send(commandName, payload, metadata) {\n            var cmdName = generateTechnicalName(namespace, 'cmd', commandName);\n            return new Promise(function(resolve) {\n                var handler = getHandler(cmdName);\n                if (!metadata) {\n                    metadata = {\n                        sentOn: new Date()\n                    };\n                } else {\n                    metadata.sentOn = new Date();\n                }\n                log('cqrs - send - send command %s %o %o', cmdName, payload, metadata);\n                resolve(handler.callback(payload, metadata));\n            });\n        }\n        exports.send = send;\n\n        // to handle a command\n        function when(commandName) {\n            var exports = {};\n            var cmdName = generateTechnicalName(namespace, 'cmd', commandName);\n\n            function invoke(callback) {\n                log('cqrs - when - add handler %s:%s', owner, cmdName);\n                addHandler(owner, cmdName, callback);\n            }\n            exports.invoke = invoke;\n\n            return exports;\n        }\n        exports.when = when;\n\n        // to publish an event\n        function publish(eventName, payload, metadata) {\n            var evtName = generateTechnicalName(namespace, 'evt', eventName);\n            var listeners = listListeners(evtName);\n            if (!metadata) {\n                metadata = {\n                    publishedOn: new Date()\n                };\n            } else {\n                metadata.publishedOn = new Date();\n            }\n            log('cqrs - publish - publish event %s %o %o', evtName, payload, metadata);\n            var promises = listeners.map(function(listener) {\n                return Promise.resolve().then(function() {\n                    return listener.callback(payload, metadata);\n                });\n            });\n            return Promise.all(promises);\n        }\n        exports.publish = publish;\n\n        // to listen an event\n        function on(eventName) {\n            var exports = {};\n            var evtName = generateTechnicalName(namespace, 'evt', eventName);\n\n            function invoke(callback) {\n                log('cqrs - on - add listener %s:%s', owner, evtName);\n                addListener(owner, evtName, callback);\n            }\n            exports.invoke = invoke;\n\n            return exports;\n        }\n        exports.on = on;\n\n        // to register a query\n        function calling(queryName) {\n            var exports = {};\n            var qryName = generateTechnicalName(namespace, 'qry', queryName);\n\n            function invoke(queryFunction) {\n                log('cqrs - calling - add query %s:%s', owner, qryName);\n                addQuery(owner, qryName, queryFunction);\n            }\n            exports.invoke = invoke;\n\n            return exports;\n        }\n        exports.calling = calling;\n\n        // to call a query\n        function call() {\n            var args = Array.prototype.slice.call(arguments);\n            var queryName = args.shift();\n            var qryName = generateTechnicalName(namespace, 'qry', queryName);\n            log('cqrs - call - call query %s:%s', owner, qryName);\n            return Promise.resolve().then(function() {\n                var query = getQuery(qryName);\n                return query.queryFunction.apply(null, args);\n            });\n        }\n        exports.call = call;\n\n        // to register an aggregate\n        function aggregate(aggregateName) {\n            var exports = {};\n            var aggName = generateTechnicalName(namespace, 'agg', aggregateName);\n\n            // to handle a command from an aggregate\n            function aggregateWhen(commandName) {\n                var exports = {};\n                var cmdName = generateTechnicalName(namespace, 'cmd', commandName);\n\n                function invoke(callback) {\n                    var invokeExports = {};\n                    function apply(eventName) {\n                        var evtName = generateTechnicalName(namespace, 'evt', eventName);\n                        function callbackWrapper(payload, metadata) {\n                            var callbackReturnedValue = callback(payload, metadata);\n                            return whenify(callbackReturnedValue).then(function (eventPayload) {\n                                if (eventName && eventPayload) {\n                                    metadata.appliedOn = new Date();\n                                    log('cqrs - aggregate apply - %s:%s:%s', owner, aggName, evtName);\n                                    var promises = listAggregateListeners(aggName, evtName).map(function(listener) {\n                                        return Promise.resolve().then(function () {\n                                            return listener.callback(eventPayload, metadata);\n                                        });\n                                    });\n                                    return Promise.all(promises).then(function() {\n                                        return publish(eventName, eventPayload, metadata);\n                                    });\n                                }\n                            });\n                        }\n                        log('cqrs - aggregate when - add handler %s:%s', owner, cmdName);\n                        addHandler(owner, cmdName, callbackWrapper);\n                        return exports;\n                    }\n                    invokeExports.apply = apply;\n                    return invokeExports;\n                }\n                exports.invoke = invoke;\n\n                return exports;\n            }\n            exports.when = aggregateWhen;\n\n            // to listen an event from an aggregate\n            function aggregateOn(eventName) {\n                var aggregateOnExports = {};\n                var evtName = generateTechnicalName(namespace, 'evt', eventName);\n\n                function invoke(callback) {\n                    log('cqrs - on - add listener %s:%s', owner, evtName);\n                    addAggregateListener(owner, aggName, evtName, callback);\n                    return exports;\n                }\n                aggregateOnExports.invoke = invoke;\n\n                return aggregateOnExports;\n            }\n            exports.on = aggregateOn;\n\n            return exports;\n        }\n        exports.aggregate = aggregate;\n\n        // to safely destroy the cqrs instance\n        function destroy() {\n            removeHandlers(owner);\n            removeListeners(owner);\n            removeAggregateListeners(owner);\n            removeQueries(owner);\n        }\n        exports.destroy = destroy;\n\n        return exports;\n    }\n\n    function setDefaultRepos(defaultHandlers, defaultListeners, defaultAggregates, defaultQueries) {\n        handlersRepo = defaultHandlers;\n        listenersRepo = defaultListeners;\n        aggregatesRepo = defaultAggregates;\n        queriesRepo = defaultQueries;\n    }\n    cqrs.setDefaultRepos = setDefaultRepos;\n\n    return cqrs;\n}));\n"],"sourceRoot":"/source/"}