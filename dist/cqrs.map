{"version":3,"file":"cqrs.min.js","sources":["../src/cqrs.js"],"names":["global","addHandler","owner","commandName","callback","alreadyRegistered","handlersRepo","some","e","push","removeHandlers","filter","forEach","splice","getHandler","commands","length","addListener","eventName","listenersRepo","removeListeners","index","indexOf","listListeners","addAggregateListener","aggregateName","aggregate","aggregates","aggregatesRepo","listeners","removeAggregateListeners","listAggregateListeners","map","reduce","a","b","concat","l","addQuery","namespace","queryName","queryFunction","isAlreadyRegistered","queriesRepo","query","listQueries","generateTechnicalName","type","name","join","cqrs","params","queryWrapper","args","Array","prototype","slice","call","arguments","Promise","resolve","reject","result","apply","queries","interfaces","handle","cmdName","debug","console","log","exports","send","payload","metadata","handler","Error","listen","evtName","publish","promises","listener","all","aggName","then","aggregateHandlerWrapper","aggregateHandler","aggregateListener","destroy","removeQueries","cqrsCb","counter","add","setDefaultRepos","defaultHandlers","defaultListeners","defaultAggregates","defaultQueries","this"],"mappings":"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","sourcesContent":["(function(global) {\n\n    'use strict';\n\n    var handlersRepo = [],\n        listenersRepo = [],\n        aggregatesRepo = [],\n        queriesRepo = [],\n        counter = 0;\n\n    // handlers' repo functions\n    function addHandler(owner, commandName, callback) {\n        var alreadyRegistered = handlersRepo.some(function (e) {\n            return e.commandName === commandName;\n        });\n        if (!alreadyRegistered) {\n            handlersRepo.push({\n                owner: owner,\n                commandName: commandName,\n                callback: callback\n            });\n        }\n    }\n\n    function removeHandlers(owner) {\n        handlersRepo.filter(function (e) {\n            return e.owner === owner;\n        }).forEach(function (e) {\n            handlersRepo.splice(e, 1);\n        });\n    }\n\n    function getHandler(commandName) {\n        var commands = handlersRepo.filter(function (e) {\n            return e.commandName === commandName;\n        });\n        if (commands.length > 0) {\n            return commands[0];\n        }\n    }\n\n    // listeners' repo functions\n    function addListener(owner, eventName, callback) {\n        listenersRepo.push({\n            owner: owner,\n            eventName: eventName,\n            callback: callback\n        });\n    }\n\n    function removeListeners(owner) {\n        listenersRepo.filter(function (e) {\n            return e.owner === owner;\n        }).forEach(function (e) {\n            var index = listenersRepo.indexOf(e);\n            listenersRepo.splice(index, 1);\n        });\n    }\n\n    function listListeners(eventName) {\n        return listenersRepo.filter(function (e) {\n            return e.eventName === eventName;\n        });\n    }\n\n    // aggregates listeners' repo functions\n    function addAggregateListener(owner, aggregateName, eventName, callback) {\n        var aggregate, aggregates = aggregatesRepo.filter(function (e) {\n            return e.owner === owner && e.aggregateName === aggregateName;\n        });\n        if (aggregates.length > 0) {\n            aggregate = aggregates[0];\n        } else {\n            aggregate = {\n                owner: owner,\n                aggregateName: aggregateName,\n                listeners: []\n            };\n            aggregatesRepo.push(aggregate);\n        }\n        aggregate.listeners.push({\n            eventName: eventName,\n            callback: callback\n        });\n    }\n\n    function removeAggregateListeners(owner) {\n        aggregatesRepo.filter(function (e) {\n            return e.owner === owner;\n        }).forEach(function (e) {\n            var index = aggregatesRepo.indexOf(e);\n            aggregatesRepo.splice(index, 1);\n        });\n    }\n\n    function listAggregateListeners(aggregateName, eventName) {\n        return aggregatesRepo.filter(function (e) {\n            //console.log('listAggregateListeners filter', e.aggregateName, aggregateName);\n            return e.aggregateName === aggregateName;\n        }).map(function (e) {\n            //console.log('listAggregateListeners map', e);\n            return e.listeners;\n        }).reduce(function (a, b) {\n            //console.log('listAggregateListeners reduce', a, b);\n            return a.concat(b);\n        }, []).filter(function (l) {\n            //console.log('listAggregateListeners filter', l, l.eventName, eventName);\n            return l.eventName === eventName;\n        });\n    }\n\n    // queries' repo functions\n    function addQuery(owner, namespace, queryName, queryFunction) {\n        var isAlreadyRegistered = queriesRepo.filter(function (query) {\n            return query.namespace === namespace && query.queryName === queryName;\n        }).length > 0;\n        if (!isAlreadyRegistered) {\n            queriesRepo.push({\n                owner: owner,\n                namespace: namespace,\n                queryName: queryName,\n                queryFunction: queryFunction\n            });\n        }\n    }\n\n    function removeQuery(owner) {\n        queriesRepo.filter(function (e) {\n            return e.owner === owner;\n        }).forEach(function (e) {\n            var index = queriesRepo.indexOf(e);\n            queriesRepo.splice(index, 1);\n        });\n    }\n\n    function listQueries(namespace) {\n        return queriesRepo.filter(function (e) {\n            return e.namespace === namespace;\n        });\n    }\n\n    // generate technical name for aggregate, command and event\n    function generateTechnicalName(namespace, type, name) {\n        if (namespace) {\n            return [namespace, type, name].join('-');\n        }\n        return [type, name].join('-');\n    }\n\n    // cqrs implementation\n    function cqrs(callback, params) {\n        var cqrsCb, owner, namespace, exports;\n        exports = {};\n        cqrsCb = typeof callback === 'function' && callback;\n        params = typeof callback === 'function' ? params : callback;\n        owner = (params && params.owner) || ('owner-' + (counter++));\n        namespace = params && params.namespace;\n\n        function queryWrapper(queryFunction) {\n            return function () {\n                var args = Array.prototype.slice.call(arguments);\n                return new Promise(function (resolve, reject) {\n                    try {\n                        var result = queryFunction.apply(queryFunction, args);\n                        resolve(result);\n                    } catch (e) {\n                        reject(e);\n                    }\n                });\n            };\n        }\n\n        function queries() {\n            var interfaces = {};\n            listQueries(namespace).forEach(function (e) {\n                interfaces[e.queryName] = queryWrapper(e.queryFunction);\n            });\n            return interfaces;\n        }\n        exports.queries = queries;\n\n        queries.add = function add(queryName, queryFunction) {\n            if (cqrs.debug) {\n                console.log('cqrs - add query %s:%s:%s', owner, namespace, queryName);\n            }\n            addQuery(owner, namespace, queryName, queryFunction);\n            return exports;\n        };\n\n        // to handle a command\n        function handle(commandName, callback) {\n            var cmdName = generateTechnicalName(namespace, 'cmd', commandName);\n            if (!getHandler(cmdName)) {\n                if (cqrs.debug) {\n                    console.log('cqrs - handle - add handler %s:%s', owner, cmdName);\n                }\n                addHandler(owner, cmdName, callback);\n            }\n            return exports;\n        }\n        exports.handle = handle;\n\n        // to send a command\n        function send(commandName, payload, metadata) {\n            return new Promise(function (resolve, reject) {\n                var cmdName = generateTechnicalName(namespace, 'cmd', commandName);\n                var handler = getHandler(cmdName);\n                if (handler) {\n                    if (cqrs.debug) {\n                        console.log('cqrs - send - send command %s %o %o', cmdName, payload, metadata);\n                    }\n                    resolve(handler.callback(payload, metadata, queries));\n                } else {\n                    reject(new Error('unable to found an handler'));\n                }\n            });\n        }\n        exports.send = send;\n\n        // to listen an event\n        function listen(eventName, callback) {\n            var evtName = generateTechnicalName(namespace, 'evt', eventName);\n            if (cqrs.debug) {\n                console.log('cqrs - listen - add listener %s:%s', owner, evtName);\n            }\n            addListener(owner, evtName, callback);\n            return exports;\n        }\n        exports.listen = listen;\n\n        // to publish an event\n        function publish(eventName, payload, metadata) {\n            var evtName = generateTechnicalName(namespace, 'evt', eventName);\n            if (cqrs.debug) {\n                console.log('cqrs - publish - publish event %s %o %o', evtName, payload, metadata);\n            }\n            var listeners = listListeners(evtName);\n            var promises = listeners.map(function(listener) {\n                return new Promise(function (resolve, reject) {\n                    try {\n                        var result = listener.callback(payload, metadata, queries);\n                        resolve(result);\n                    } catch (e) {\n                        reject(e);\n                    }\n                });\n            });\n            return Promise.all(promises);\n        }\n        exports.publish = publish;\n\n        // to register an aggregate\n        function aggregate(aggregateName, callback) {\n            var aggName = generateTechnicalName(namespace, 'agg', aggregateName);\n            var exports = {};\n\n            // to publish an event from an aggregate\n            function apply(eventName, payload, metadata) {\n                var evtName = generateTechnicalName(namespace, 'evt', eventName);\n                if (cqrs.debug) {\n                    console.log('cqrs - aggregate apply - %s:%s:%s', owner, aggName, evtName);\n                }\n                var promises = listAggregateListeners(aggName, evtName).map(function (listener) {\n                    return new Promise(function (resolve, reject) {\n                        try {\n                            var result = listener.callback(payload, metadata, queries);\n                            resolve(result);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    });\n                });\n                return Promise.all(promises).then(function () {\n                    var result = publish(eventName, payload, metadata);\n                    return result;\n                });\n            }\n            exports.apply = apply;\n\n            function aggregateHandlerWrapper(callback) {\n                return function (payload, metadata, queries) {\n                    callback(payload, metadata, queries, apply);\n                };\n            }\n\n            // to handle a command from an aggregate\n            function aggregateHandler(commandName, callback) {\n                handle(commandName, aggregateHandlerWrapper(callback));\n                return exports;\n            }\n            exports.handle = aggregateHandler;\n\n            // to listen an event from an aggregate\n            function aggregateListener(eventName, callback) {\n                var evtName = generateTechnicalName(namespace, 'evt', eventName);\n                if (cqrs.debug) {\n                    console.log('cqrs - aggregate listener - add listener %s:%s:%s', owner, aggName, evtName);\n                }\n                addAggregateListener(owner, aggName, evtName, callback);\n            }\n            exports.listen = aggregateListener;\n\n            if (callback) {\n                callback(aggregateHandler, aggregateListener);\n            }\n\n            return exports;\n        }\n        exports.aggregate = aggregate;\n\n        // to safely destroy the cqrs instance\n        function destroy() {\n            removeHandlers(owner);\n            removeListeners(owner);\n            removeAggregateListeners(owner);\n            removeQueries(owner);\n        }\n        exports.destroy = destroy;\n\n        if (cqrsCb) {\n            cqrsCb(send, handle, publish, listen, aggregate, query);\n        }\n\n        return exports;\n    }\n\n    function setDefaultRepos(defaultHandlers, defaultListeners, defaultAggregates, defaultQueries) {\n        handlersRepo = defaultHandlers;\n        listenersRepo = defaultListeners;\n        aggregatesRepo = defaultAggregates;\n        queriesRepo = defaultQueries;\n    }\n    cqrs.setDefaultRepos = setDefaultRepos;\n\n    global.cqrs = cqrs;\n}(this));\n"]}