{"version":3,"file":"cqrs.min.js","sources":["cqrs.js"],"names":["global","factory","define","amd","module","exports","cqrs","this","addHandler","owner","commandName","callback","alreadyRegistered","handlersRepo","some","e","push","removeHandlers","filter","forEach","splice","getHandler","commands","length","addListener","eventName","listenersRepo","removeListeners","index","indexOf","listListeners","addAggregateListener","aggregateName","aggregate","aggregates","aggregatesRepo","listeners","removeAggregateListeners","listAggregateListeners","map","reduce","a","b","concat","l","addQuery","queryName","queryFunction","isAlreadyRegistered","queriesRepo","query","getQuery","generateTechnicalName","namespace","type","name","join","params","register","qryName","debug","console","log","call","args","Array","prototype","slice","arguments","shift","Promise","resolve","reject","result","apply","Error","handle","cmdName","send","payload","metadata","handler","listen","evtName","publish","promises","listener","all","aggName","then","aggregateHandlerWrapper","aggregateHandler","aggregateListener","destroy","removeQueries","cqrsCb","counter","setDefaultRepos","defaultHandlers","defaultListeners","defaultAggregates","defaultQueries"],"mappings":"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","sourcesContent":["\n(function(global, factory) {\n\n    if (typeof define == 'function' && define.amd) {\n        define(function() {\n            return factory(global);\n        });\n    } else if (typeof module !== 'undefined') {\n        module.exports = factory(global);\n    } else if (typeof global.exports !== 'undefined') {\n        exports.cqrs = factory(global);\n    } else {\n        global.cqrs = factory(global);\n    }\n\n}(this, function(global) {\n\n    'use strict';\n\n    var handlersRepo = [],\n        listenersRepo = [],\n        aggregatesRepo = [],\n        queriesRepo = [],\n        counter = 0;\n\n    // handlers' repo functions\n    function addHandler(owner, commandName, callback) {\n        var alreadyRegistered = handlersRepo.some(function (e) {\n            return e.commandName === commandName;\n        });\n        if (!alreadyRegistered) {\n            handlersRepo.push({\n                owner: owner,\n                commandName: commandName,\n                callback: callback\n            });\n        }\n    }\n\n    function removeHandlers(owner) {\n        handlersRepo.filter(function (e) {\n            return e.owner === owner;\n        }).forEach(function (e) {\n            handlersRepo.splice(e, 1);\n        });\n    }\n\n    function getHandler(commandName) {\n        var commands = handlersRepo.filter(function (e) {\n            return e.commandName === commandName;\n        });\n        if (commands.length > 0) {\n            return commands[0];\n        }\n    }\n\n    // listeners' repo functions\n    function addListener(owner, eventName, callback) {\n        listenersRepo.push({\n            owner: owner,\n            eventName: eventName,\n            callback: callback\n        });\n    }\n\n    function removeListeners(owner) {\n        listenersRepo.filter(function (e) {\n            return e.owner === owner;\n        }).forEach(function (e) {\n            var index = listenersRepo.indexOf(e);\n            listenersRepo.splice(index, 1);\n        });\n    }\n\n    function listListeners(eventName) {\n        return listenersRepo.filter(function (e) {\n            return e.eventName === eventName;\n        });\n    }\n\n    // aggregates listeners' repo functions\n    function addAggregateListener(owner, aggregateName, eventName, callback) {\n        var aggregate, aggregates = aggregatesRepo.filter(function (e) {\n            return e.owner === owner && e.aggregateName === aggregateName;\n        });\n        if (aggregates.length > 0) {\n            aggregate = aggregates[0];\n        } else {\n            aggregate = {\n                owner: owner,\n                aggregateName: aggregateName,\n                listeners: []\n            };\n            aggregatesRepo.push(aggregate);\n        }\n        aggregate.listeners.push({\n            eventName: eventName,\n            callback: callback\n        });\n    }\n\n    function removeAggregateListeners(owner) {\n        aggregatesRepo.filter(function (e) {\n            return e.owner === owner;\n        }).forEach(function (e) {\n            var index = aggregatesRepo.indexOf(e);\n            aggregatesRepo.splice(index, 1);\n        });\n    }\n\n    function listAggregateListeners(aggregateName, eventName) {\n        return aggregatesRepo.filter(function (e) {\n            //console.log('listAggregateListeners filter', e.aggregateName, aggregateName);\n            return e.aggregateName === aggregateName;\n        }).map(function (e) {\n            //console.log('listAggregateListeners map', e);\n            return e.listeners;\n        }).reduce(function (a, b) {\n            //console.log('listAggregateListeners reduce', a, b);\n            return a.concat(b);\n        }, []).filter(function (l) {\n            //console.log('listAggregateListeners filter', l, l.eventName, eventName);\n            return l.eventName === eventName;\n        });\n    }\n\n    // queries' repo functions\n    function addQuery(owner, queryName, queryFunction) {\n        var isAlreadyRegistered = queriesRepo.filter(function (query) {\n            return query.queryName === queryName;\n        }).length > 0;\n        if (!isAlreadyRegistered) {\n            queriesRepo.push({\n                owner: owner,\n                queryName: queryName,\n                queryFunction: queryFunction\n            });\n        }\n    }\n\n    function removeQuery(owner) {\n        queriesRepo.filter(function (e) {\n            return e.owner === owner;\n        }).forEach(function (e) {\n            var index = queriesRepo.indexOf(e);\n            queriesRepo.splice(index, 1);\n        });\n    }\n\n    function getQuery(queryName) {\n        return queriesRepo.filter(function (e) {\n            return e.queryName === queryName;\n        })[0];\n    }\n\n    // generate technical name for aggregate, command and event\n    function generateTechnicalName(namespace, type, name) {\n        if (namespace) {\n            return [namespace, type, name].join('-');\n        }\n        return [type, name].join('-');\n    }\n\n    // cqrs implementation\n    function cqrs(callback, params) {\n        var cqrsCb, owner, namespace, exports;\n        exports = {};\n        cqrsCb = typeof callback === 'function' && callback;\n        params = typeof callback === 'function' ? params : callback;\n        owner = (params && params.owner) || ('owner-' + (counter++));\n        namespace = params && params.namespace;\n\n        function register(queryName, queryFunction) {\n            var qryName = generateTechnicalName(namespace, 'qry', queryName);\n            if (cqrs.debug) {\n                console.log('cqrs - add query %s:%s', owner, qryName);\n            }\n            addQuery(owner, queryName, queryFunction);\n            return exports;\n        }\n        exports.register = register;\n\n        function call() {\n            var args = Array.prototype.slice.call(arguments);\n            var queryName = args.shift();\n            var qryName = generateTechnicalName(namespace, 'qry', queryName);\n            if (cqrs.debug) {\n                console.log('cqrs - query - call query %s:%s', owner, qryName);\n            }\n            return new Promise(function (resolve, reject) {\n                var query = getQuery(qryName);\n                if (query) {\n                    try {\n                        var result = query.queryFunction.apply(global, args);\n                        resolve(result);\n                    } catch (e) {\n                        reject(e);\n                    }\n                } else {\n                    reject(new Error('unable to find the query: ' + qryName));\n                }\n            });\n        }\n        exports.call = call;\n\n        // to handle a command\n        function handle(commandName, callback) {\n            var cmdName = generateTechnicalName(namespace, 'cmd', commandName);\n            if (!getHandler(cmdName)) {\n                if (cqrs.debug) {\n                    console.log('cqrs - handle - add handler %s:%s', owner, cmdName);\n                }\n                addHandler(owner, cmdName, callback);\n            }\n            return exports;\n        }\n        exports.handle = handle;\n\n        // to send a command\n        function send(commandName, payload, metadata) {\n            return new Promise(function (resolve, reject) {\n                var cmdName = generateTechnicalName(namespace, 'cmd', commandName);\n                var handler = getHandler(cmdName);\n                if (handler) {\n                    if (cqrs.debug) {\n                        console.log('cqrs - send - send command %s %o %o', cmdName, payload, metadata);\n                    }\n                    resolve(handler.callback(payload, metadata));\n                } else {\n                    reject(new Error('unable to found an handler'));\n                }\n            });\n        }\n        exports.send = send;\n\n        // to listen an event\n        function listen(eventName, callback) {\n            var evtName = generateTechnicalName(namespace, 'evt', eventName);\n            if (cqrs.debug) {\n                console.log('cqrs - listen - add listener %s:%s', owner, evtName);\n            }\n            addListener(owner, evtName, callback);\n            return exports;\n        }\n        exports.listen = listen;\n\n        // to publish an event\n        function publish(eventName, payload, metadata) {\n            var evtName = generateTechnicalName(namespace, 'evt', eventName);\n            if (cqrs.debug) {\n                console.log('cqrs - publish - publish event %s %o %o', evtName, payload, metadata);\n            }\n            var listeners = listListeners(evtName);\n            var promises = listeners.map(function(listener) {\n                return new Promise(function (resolve, reject) {\n                    try {\n                        var result = listener.callback(payload, metadata);\n                        resolve(result);\n                    } catch (e) {\n                        reject(e);\n                    }\n                });\n            });\n            return Promise.all(promises);\n        }\n        exports.publish = publish;\n\n        // to register an aggregate\n        function aggregate(aggregateName, callback) {\n            var aggName = generateTechnicalName(namespace, 'agg', aggregateName);\n            var exports = {};\n\n            // to publish an event from an aggregate\n            function apply(eventName, payload, metadata) {\n                var evtName = generateTechnicalName(namespace, 'evt', eventName);\n                if (cqrs.debug) {\n                    console.log('cqrs - aggregate apply - %s:%s:%s', owner, aggName, evtName);\n                }\n                var promises = listAggregateListeners(aggName, evtName).map(function (listener) {\n                    return new Promise(function (resolve, reject) {\n                        try {\n                            var result = listener.callback(payload, metadata);\n                            resolve(result);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    });\n                });\n                return Promise.all(promises).then(function () {\n                    var result = publish(eventName, payload, metadata);\n                    return result;\n                });\n            }\n            exports.apply = apply;\n\n            function aggregateHandlerWrapper(callback) {\n                return function (payload, metadata) {\n                    callback(payload, metadata, apply);\n                };\n            }\n\n            // to handle a command from an aggregate\n            function aggregateHandler(commandName, callback) {\n                handle(commandName, aggregateHandlerWrapper(callback));\n                return exports;\n            }\n            exports.handle = aggregateHandler;\n\n            // to listen an event from an aggregate\n            function aggregateListener(eventName, callback) {\n                var evtName = generateTechnicalName(namespace, 'evt', eventName);\n                if (cqrs.debug) {\n                    console.log('cqrs - aggregate listener - add listener %s:%s:%s', owner, aggName, evtName);\n                }\n                addAggregateListener(owner, aggName, evtName, callback);\n            }\n            exports.listen = aggregateListener;\n\n            if (callback) {\n                callback(aggregateHandler, aggregateListener);\n            }\n\n            return exports;\n        }\n        exports.aggregate = aggregate;\n\n        // to safely destroy the cqrs instance\n        function destroy() {\n            removeHandlers(owner);\n            removeListeners(owner);\n            removeAggregateListeners(owner);\n            removeQueries(owner);\n        }\n        exports.destroy = destroy;\n\n        if (cqrsCb) {\n            cqrsCb(send, handle, publish, listen, aggregate, query, register);\n        }\n\n        return exports;\n    }\n\n    function setDefaultRepos(defaultHandlers, defaultListeners, defaultAggregates, defaultQueries) {\n        handlersRepo = defaultHandlers;\n        listenersRepo = defaultListeners;\n        aggregatesRepo = defaultAggregates;\n        queriesRepo = defaultQueries;\n    }\n    cqrs.setDefaultRepos = setDefaultRepos;\n\n    return cqrs;\n}));\n"]}